// Main JavaScript - Minified and optimized
(function() {
    'use strict';
    
    // Performance monitoring
    const perfObserver = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
            if (entry.entryType === 'largest-contentful-paint') {
                console.log('LCP:', entry.startTime);
            }
        }
    });
    
    if ('PerformanceObserver' in window) {
        perfObserver.observe({entryTypes: ['largest-contentful-paint']});
    }
    
    // Intersection Observer for animations
    const animateOnScroll = () => {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('loaded');
                    observer.unobserve(entry.target);
                }
            });
        }, {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        });
        
        document.querySelectorAll('.loading').forEach(el => {
            observer.observe(el);
        });
    };
    
    // Preload next page resources
    const preloadResources = () => {
        const links = document.querySelectorAll('a[href]');
        const preloadedUrls = new Set();
        
        links.forEach(link => {
            link.addEventListener('mouseenter', () => {
                const href = link.getAttribute('href');
                if (href && !preloadedUrls.has(href) && href.startsWith('/')) {
                    const linkEl = document.createElement('link');
                    linkEl.rel = 'prefetch';
                    linkEl.href = href;
                    document.head.appendChild(linkEl);
                    preloadedUrls.add(href);
                }
            });
        });
    };
    
    // Service Worker registration for caching
    const registerServiceWorker = () => {
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => {
                        console.log('SW registered: ', registration);
                    })
                    .catch(registrationError => {
                        console.log('SW registration failed: ', registrationError);
                    });
            });
        }
    };
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            animateOnScroll();
            preloadResources();
            registerServiceWorker();
        });
    } else {
        animateOnScroll();
        preloadResources();
        registerServiceWorker();
    }
    
    // Web Vitals tracking
    const trackWebVitals = () => {
        if ('web-vitals' in window) {
            webVitals.getCLS(console.log);
            webVitals.getFID(console.log);
            webVitals.getFCP(console.log);
            webVitals.getLCP(console.log);
            webVitals.getTTFB(console.log);
        }
    };
    
    // Load Web Vitals library asynchronously
    const script = document.createElement('script');
    script.src = 'https://unpkg.com/web-vitals@3/dist/web-vitals.iife.js';
    script.onload = trackWebVitals;
    document.head.appendChild(script);
})();